# .github/workflows/feature-update-pr.yml
name: "PR: develop → active feature/*"

on:
  # Run only after a PR into develop is closed (merged or just closed)
  pull_request:
    types: [closed]
    branches:
      - develop

concurrency:
  group: feature-update-pr-${{ github.ref }}
  cancel-in-progress: false

jobs:
  create-prs:
    # ✅ マージされたときだけ実行
    if: ${{ github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.BOT_PAT }}
      SLACK_WEBHOOK_URL:  ${{ secrets.SLACK_WEBHOOK_URL }}
      DRY_RUN: ${{ vars.FEATURE_UPDATE_DRY_RUN || 'true' }}

    steps:
      - uses: actions/checkout@v4

      - name: Scan and open PRs
        run: |
          set -euo pipefail
          repo="${{ github.repository }}"
          cutoff=$(date -u -d '-7 days' +%s)
          dry="${{ github.event.inputs.dry_run || 'false' }}"
          summary=''

          # ✅ マージされた feature ブランチ名を自動検出（手動入力があればそちらを優先）
          merged_input="${{ github.event.inputs.merged_branch }}"
          merged_auto="${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || '' }}"
          merged="${merged_input:-$merged_auto}"

          if [[ -n "$merged" ]]; then
            summary+=$'\n• *'"${merged}"'* — develop ← feature マージ完了'
          fi

          echo "==> Collecting feature/* branches updated since $(date -u -d '-7 days')"
          branches=$(gh api "/repos/${repo}/branches?per_page=100" --paginate --jq '.[].name' | grep '^feature/' || true)

          for br in $branches; do
            # 直前に develop へマージされたブランチはスキップ
            if [[ -n "$merged" && "$br" == "$merged" ]]; then
              echo "🚫  $br was just merged into develop; skip sync PR"
              continue
            fi

            # 最終更新が7日以上前のブランチはスキップ
            pushed=$(gh api "/repos/${repo}/branches/${br}" --jq '.commit.commit.committer.date')
            if [[ -z "$pushed" ]]; then
              echo "⏭  $br skipped (no commit info)"
              continue
            fi
            if [[ $(date -d "$pushed" +%s) -lt $cutoff ]]; then
              echo "⏭  $br skipped (stale: $pushed)"
              continue
            fi

            echo "🔍  $br is active (last push $pushed)"

            # 既に開いている PR が存在するか確認
            existing=$(gh pr list \
                        --repo "${repo}" \
                        --base "$br" \
                        --head develop \
                        --state open \
                        --json url -q '.[0].url' || true)
            if [[ -n "$existing" ]]; then
              echo "↳  PR already exists: $existing (skip)"
              continue
            fi

            if [[ "$dry" == "true" ]]; then
              summary+=$'\n• (dry-run) develop → '"${br}"
              echo "💡  (dry-run) Would create PR develop → $br"
              continue
            fi

            echo "✏️  Creating PR develop → $br ..."
            pr_url=$(gh pr create --repo "${repo}" --base "$br" --head develop \
                        --title "Sync develop into $br" \
                        --body "Automated PR to keep **$br** up-to-date with **develop**." \
                        | tail -n1)
            summary+=$'\n• *'"${br}"'* — <'"${pr_url}"'|同期 PR>'
          done

          # Slack 通知
          if [[ -n "$summary" ]]; then
            slack_text=$'🟢 *以下のfeatureブランチが更新対象です*\n'
            slack_text+=$'各自作業ブランチの更新を行ってください :arrow_down:\n'
            slack_text+="$summary"
            payload=$(jq -n --arg text "$slack_text" '{text: $text}')
            curl -s -X POST -H 'Content-type: application/json' \
               --data "$payload" "$SLACK_WEBHOOK_URL"
          fi

          echo "✅  Finished"

      # ===== 失敗時専用 Slack 通知 =====
      - name: Notify failure to Slack
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          run_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          text=$'❌ *feature-update-pr* ジョブが失敗しました\n<'$run_url'|ログはこちら> を確認してください。'
          payload=$(jq -Rn --arg t "$text" '{text:$t}')
          curl -s -X POST -H 'Content-type: application/json' \
               --data "$payload" "$SLACK_WEBHOOK_URL"
