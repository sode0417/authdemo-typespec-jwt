# .github/workflows/feature-update-pr.yml
name: "PR: develop → active feature/*"

on:
  workflow_dispatch:
    inputs:
      dry_run:     # true にすると PR を作らずログだけ
        description: "Preview only (no PR creation)"
        type: boolean
        default: false
      merged_branch:
        description: "feature branch merged into develop"
        type: string
        default: ""

jobs:
  create-prs:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.BOT_PAT }}
      SLACK_WEBHOOK_URL:  ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - uses: actions/checkout@v4
      - name: Scan and open PRs
        run: |
          set -euo pipefail
          repo="${{ github.repository }}"
          cutoff=$(date -u -d '-7 days' +%s)
          dry="${{ github.event.inputs.dry_run || 'false' }}"
          summary=""

          # マージされたブランチ
          merged="${{ github.event.inputs.merged_branch }}"
          [[ -n "$merged" ]] && summary+="\n• *$merged* — develop ← feature マージ完了"

          echo "==> Collecting feature/* branches updated since $(date -u -d '-7 days')"
          branches=$(gh api "/repos/${repo}/branches?per_page=100" --paginate --jq '.[].name' | grep '^feature/')

          for br in $branches; do
            pushed=$(gh api "/repos/${repo}/branches/${br}" --jq '.commit.commit.committer.date')
            [[ $(date -d "$pushed" +%s) -lt $cutoff ]] && { echo "⏭  $br skipped"; continue; }

            echo "🔍  $br is active (last push $pushed)"

            # 既に “開いている” PR が存在するか確認
            existing=$(gh pr list \
                        --base "$br" \
                        --head develop \
                        --state open \
                        --json url -q '.[0].url')

            if [[ -n "$existing" ]]; then
              echo "↳  PR already exists; skipping"
              continue
            fi

            if [[ $dry == "true" ]]; then
              summary+="\n• (dry-run) develop → $br"
              echo "💡  (dry-run) Would create PR develop → $br"
              continue
            fi

            echo "✏️  Creating PR develop → $br ..."
            pr_url=$(gh pr create --base "$br" --head develop \
                        --title "Sync develop into $br" \
                        --body "Automated PR to keep **$br** up-to-date with **develop**." \
                        | tail -n1)
            summary+="\n• *$br* — <$pr_url|同期 PR>"
          done

          # Slack 通知
          if [[ -n "$summary" ]]; then
            slack_text=$'🟢 *以下のfeatureブランチが更新されました*\n'
            slack_text+=$'各自作業ブランチの更新を行ってください :arrow_down:\n'
            slack_text+="$summary"

            payload=$(jq -Rn --arg text "$slack_text" '{text:$text}')
            curl -s -X POST -H 'Content-type: application/json' \
                 --data "$payload" "$SLACK_WEBHOOK_URL"
          fi

          echo "✅  Finished"

      # ===== 失敗時専用 Slack 通知 =====
      - name: Notify failure to Slack
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          run_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          text='❌ *feature-update-pr* ジョブが失敗しました\n<${run_url}|ログはこちら> を確認してください。'
          payload=$(jq -Rn --arg t "$text" '{text:$t}')
          curl -s -X POST -H 'Content-type: application/json' \
               --data "$payload" "$SLACK_WEBHOOK_URL"
