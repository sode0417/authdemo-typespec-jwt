import { type Enum, type Model, type Namespace, type Program, type Scalar, type Tuple, type Type, type Union } from "@typespec/compiler";
import type { ContainsDecorator, ContentEncodingDecorator, ContentMediaTypeDecorator, ContentSchemaDecorator, ExtensionDecorator, IdDecorator, JsonSchemaDecorator, MaxContainsDecorator, MaxPropertiesDecorator, MinContainsDecorator, MinPropertiesDecorator, MultipleOfDecorator, OneOfDecorator, PrefixItemsDecorator, UniqueItemsDecorator } from "../generated-defs/TypeSpec.JsonSchema.js";
/**
 * TypeSpec Types that can create a json schmea declaration
 */
export type JsonSchemaDeclaration = Model | Union | Enum | Scalar;
export declare const 
/** Check if the given type is annotated with `@jsonSchema`  */
getJsonSchema: (program: Program, type: Type) => boolean, markJsonSchema: (program: Program, type: Type) => void;
/** {@inheritdoc JsonSchemaDecorator} */
export declare const $jsonSchema: JsonSchemaDecorator;
export declare const 
/** Get base uri set via `@baseUri` decorator */
getBaseUri: (program: Program, type: any) => any, setBaseUri: (program: Program, type: any, value: any) => void, 
/** {@inheritdoc BaseUriDecorator} */
$baseUri: import("@typespec/compiler").DecoratorFunction;
/** Find base uri for the given type. */
export declare function findBaseUri(program: Program, target: JsonSchemaDeclaration | Namespace): string | undefined;
/**
 * Check if the given type is annoted with `@jsonSchema` or within a container annoted with `@jsonSchema`.
 * @param program TypeSpec program
 * @param target Type
 */
export declare function isJsonSchemaDeclaration(program: Program, target: JsonSchemaDeclaration): boolean;
/**
 * Returns types that are annotated with `@jsonSchema` or contained within a namespace that is annoted with `@jsonSchema`.
 * @param program TypeSpec program
 */
export declare function getJsonSchemaTypes(program: Program): (Namespace | Model)[];
export declare const 
/** Get value set by `@multipleOf` decorator as a `Numeric` type. */
getMultipleOfAsNumeric: (program: Program, type: Type) => import("@typespec/compiler").Numeric | undefined, setMultipleOf: (program: Program, type: Type, value: import("@typespec/compiler").Numeric) => void, 
/** {@inheritdoc MultipleOfDecorator} */
$multipleOf: MultipleOfDecorator;
/** Get value set by `@multipleOf` decorator as a `number` type. If the value is not representable as a number or not set, returns undefined. */
export declare function getMultipleOf(program: Program, target: Type): number | undefined;
export declare const 
/** Get id as set with `@id` decorator. */
getId: (program: Program, type: Type) => string | undefined, setId: (program: Program, type: Type, value: string) => void, 
/** {@inheritdoc IdDecorator} */
$id: IdDecorator;
export declare const 
/** Check if given type is annotated with `@oneOf` decorator */
isOneOf: (program: Program, type: Type) => boolean, markOneOf: (program: Program, type: Type) => void;
/** {@inheritdoc OneOfDecorator} */
export declare const $oneOf: OneOfDecorator;
export declare const 
/** Get contains value set by `@contains` decorator */
getContains: (program: Program, type: Type) => Type | undefined, setContains: (program: Program, type: Type, value: Type) => void, 
/** {@inheritdoc ContainsDecorator} */
$contains: ContainsDecorator;
export declare const 
/** Get value set by `@minContains` decorator */
getMinContains: (program: Program, type: Type) => number | undefined, setMinContains: (program: Program, type: Type, value: number) => void, 
/** {@inheritdoc MinContainsDecorator} */
$minContains: MinContainsDecorator;
export declare const 
/** Get value set by `@maxContains` decorator */
getMaxContains: (program: Program, type: Type) => number | undefined, setMaxContains: (program: Program, type: Type, value: number) => void, 
/** {@inheritdoc MaxContainsDecorator} */
$maxContains: MaxContainsDecorator;
export declare const 
/** Check if the given array is annotated with `@uniqueItems` decorator */
getUniqueItems: (program: Program, type: Type) => unknown, setUniqueItems: (program: Program, type: Type, value: unknown) => void;
/** {@inheritdoc UniqueItemsDecorator} */
export declare const $uniqueItems: UniqueItemsDecorator;
export declare const 
/** Get minimum number of properties set by `@minProperties` decorator */
getMinProperties: (program: Program, type: Type) => number | undefined, setMinProperties: (program: Program, type: Type, value: number) => void, 
/** {@inheritdoc MinPropertiesDecorator} */
$minProperties: MinPropertiesDecorator;
export declare const 
/** Get maximum number of properties set by `@maxProperties` decorator */
getMaxProperties: (program: Program, type: Type) => number | undefined, setMaxProperties: (program: Program, type: Type, value: number) => void, 
/** {@inheritdoc MaxPropertiesDecorator} */
$maxProperties: MaxPropertiesDecorator;
export declare const 
/** Get content encoding as configured by `@contentEncoding` decorator. */
getContentEncoding: (program: Program, type: Type) => string | undefined, setContentEncoding: (program: Program, type: Type, value: string) => void, 
/** {@inheritdoc ContentEncodingDecorator} */
$contentEncoding: ContentEncodingDecorator;
export declare const 
/** Get content media type as configured by `@contentMediaType` decorator. */
getContentMediaType: (program: Program, type: Type) => string | undefined, setContentMediaType: (program: Program, type: Type, value: string) => void, 
/** {@inheritdoc ContentMediaTypeDecorator} */
$contentMediaType: ContentMediaTypeDecorator;
export declare const 
/** Get content schema set with `@contentSchema` decorator */
getContentSchema: (program: Program, type: Type) => Type | undefined, setContentSchema: (program: Program, type: Type, value: Type) => void, 
/** {@inheritdoc ContentSchemaDecorator} */
$contentSchema: ContentSchemaDecorator;
export declare const 
/** Get prefix items set with `@prefixItems` decorator */
getPrefixItems: (program: Program, type: Type) => Tuple | undefined, setPrefixItems: (program: Program, type: Type, value: Tuple) => void;
/** {@inheritdoc PrefixItemsDecorator} */
export declare const $prefixItems: PrefixItemsDecorator;
/**
 * Data type containing information about an extension.
 */
export interface ExtensionRecord {
    /** Extension key */
    key: string;
    /** Extension value */
    value: Type | unknown;
}
/** {@inheritdoc ExtensionDecorator} */
export declare const $extension: ExtensionDecorator;
/**
 * Get extensions set via the `@extension` decorator on the given type
 * @param program TypeSpec program
 * @param target Type
 */
export declare function getExtensions(program: Program, target: Type): ExtensionRecord[];
/**
 * Set extension on the given type(Same as calling `@extension` decorator)
 * @param program TypeSpec program
 * @param target Type
 * @param key Extension key
 * @param value Extension value
 */
export declare function setExtension(program: Program, target: Type, key: string, value: unknown): void;
//# sourceMappingURL=decorators.d.ts.map